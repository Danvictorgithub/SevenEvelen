// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserType {
  Customer
  Vendor
  Admin
}
model User {
  id Int @default(autoincrement()) @id
  email String @unique
  password String
  firstName String?
  lastName String?
  image String?
  status UserType @default(Customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // phoneNumber String @unique
  vendor Vendor?
  vendorId Int? @unique
  cart CartItem[]
  transactions Transaction[]
}

model Store {
  id Int @default(autoincrement()) @id
  name String
  image String?
  address String
  opening_hours String
  long String?
  lat String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model Brand {
  id Int @default(autoincrement()) @id
  name String @unique
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products VendorProduct[]
}

model Vendor {
  id Int @default(autoincrement()) @id
  name String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products VendorProduct[]
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int @unique
  reorders Reorder[]
}
model ProductType {
  id Int @default(autoincrement()) @id
  name String @unique
  productTypeParent ProductType? @relation("ProductTypeBreadCrumb",fields: [productTypeParentId], references: [id], onDelete: Cascade)
  productTypeParentId Int?
  productTypes ProductType[] @relation("ProductTypeBreadCrumb")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products VendorProduct[]
}
model VendorProduct {
  id Int @default(autoincrement()) @id
  name String
  image String?
  upcCode String
  size String
  originalPrice Float
  brand Brand @relation(fields: [brandId], references: [id])
  brandId Int
  productType ProductType @relation(fields: [productTypeId], references: [id], onDelete: Cascade)
  productTypeId Int
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model Product {
  id Int @default(autoincrement()) @id
  product VendorProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  markupRate Float
  stock Int @default(0)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  transactionItems TransactionItem[]
  reorderItems ReorderItems[]
  @@unique([storeId,productId])
}

model CartItem {
  id Int @default(autoincrement()) @id
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId,productId])
}

model Transaction {
  id String @default(uuid()) @id
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  totalAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactionItems TransactionItem[]
}

model TransactionItem {
  id Int @default(autoincrement()) @id
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum ReorderStatus {
  Pending
  Approved
  Rejected
}
model Reorder {
  id String @id @default(uuid())
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId Int
  status ReorderStatus @default(Pending)
  reorderItems ReorderItems[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReorderItems {
  id Int @default(autoincrement()) @id
  reorder Reorder @relation(fields: [reorderId], references: [id], onDelete: Cascade)
  reorderId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}